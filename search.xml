<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SpringMVC框架学习总结]]></title>
    <url>%2F2019%2F02%2F15%2Fspringmvc-kuang-jia-xue-xi-zong-jie%2F</url>
    <content type="text"><![CDATA[SpringMVC框架学习总结 前言在学校就开始学习 Spring MVC，出来工作之后也用了 Spring MVC 开发了几个项目。但是，还没有好好的系统的梳理一下所学的知识，今天有时间就好好的来做个总结吧。 Spring MVC学习笔记什么是MVCSpring MVC是Spring框架的一个模块，Spring MVC和Spring无需通过中间整合层进行整合。Spring MVC是一个基于MVC的web框架。 那什么是 MVC 呢？ MVC模式（Model–view–controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。 控制器（Controller）- 负责转发请求，对请求进行处理。 视图（View） - 界面设计人员进行图形界面设计。 模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。 所以说，MVC 模式将程序划分成了三个组件，模型（Model）用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。视图（View）负责展示数据。 控制器（Controller）处理事件并作出响应（事件包括用户的行为，比如说请求）和数据 Model 上的改变。 用户发起request请求至控制器(Controller)，控制接收用户请求的数据，委托给模型进行处理 控制器通过模型(Model)处理数据并得到处理结果，模型通常是指业务逻辑 模型处理结果返回给控制器 控制器将模型数据在视图(View)中展示，web中模型无法将数据直接在视图上显示，需要通过控制器完成。 控制器将视图response响应给用户，通过视图展示给用户要的数据或处理结果。 Spring MVC核心架构 发起请求到前端控制器 (DispatcherServlet) 前端控制器请求 HandlerMapping 查找 Handler，可以根据xml配置、注解进行查找 处理器映射器 HandlerMapping 向前端控制器返回Handler 前端控制器调用处理器适配器去执行 Handler 处理器适配器去执行 Handler Handler 执行完成给适配器返回 ModelAndView 处理器适配器向前端控制器返回 ModelAndView，ModelAndView 是 Spring MVC 框架的一个底层对象，包括 Model 和 View 前端控制器请求视图解析器去进行视图解析，根据逻辑视图名解析成真正的视图 (jsp) 视图解析器向前端控制器返回 View 前端控制器进行视图渲染，视图渲染将模型数据(在 ModelAndView 对象中)填充到 request 域 前端控制器向用户响应结果 通常呢，我们做项目基本上大多数用的是 Spring+SpringMVC+MyBatis三大框架整合的SSM框架，有时间的话再来搭一个简易的框架。在 Spring MVC 中用到了很多的注解，通过注解可以定义控制器等等。下面是一些常用的注解。 结语有些东西用的多就越用越顺手，但是实际操作跟理论方面都要重视，只有知道这个东西的原理才能走的更远。会用很简单的网上也有很多教程之类的东西，但是还是自己总结归纳的才记忆深刻。一味的敲代码并不能脱离码农，多了解核心的东西才会成长。]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>JAVA后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring框架基础知识]]></title>
    <url>%2F2019%2F01%2F31%2Fspring-kuang-jia-ji-chu-zhi-shi%2F</url>
    <content type="text"><![CDATA[Spring框架基础知识 前言首先有一个问题，什么是 Spring 呢？Spring 啊，它是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。企业级开发 JavaEE 框架有很多，经过一系列的技术变迁，现在应该绝大部分企业开发都是用的 Spring 框架了吧，之所以要用 Spring 进行开发，肯定是因为优点多啊。因为优点多，所以我们需要去了解它，熟悉它，精通它。 Spring框架概述什么是SpringSpring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。任何 Java 应用都可以从 Spring 中受益。Spring 的核心是控制反转（IoC）和面向切面（AOP）。简单来说，Spring 是一个分层的 JavaSE/EE full-stack(一站式) 轻量级开源框架。 1、轻量级：与EJB对比，依赖资源少，销毁的资源少。 2、一站式，每一个层都提供的解决方案 Spring核心Spring 面向方面编程（AOP）和控制反转 （IOC） 容器 Spring优点 1、方便解耦，简化开发 （高内聚低耦合），使用Spring的IOC容器，将对象之间的依赖关系交给Spring，让我们更专注于应用逻辑 2、Spring就是一个大工厂（容器），可以将所有对象创建和依赖关系维护，交给Spring管理 3、对主流的框架提供了很好的集成支持，如Hibernate,Struts2,JPA等 4、Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能 5、Spring的高度可开放性，并不强制依赖于Spring，开发者可以自由选择Spring部分或全部 Spring体系结构Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式，如图所示。 组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下： 核心容器：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转 （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。 Spring 上下文：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。 Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。 Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。 Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。 Spring Web 模块：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。 Spring MVC 框架：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。 看了 Spring 是什么，我们再来看看 Spring 的两大核心。 Spring 两大核心 IOC 跟 AOPSpring依赖注入和控制反转的理解Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了” 谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。 为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。 IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。 DI—Dependency Injection，即“依赖注入”：由容器动态的将某个依赖关系注入到组件之中。理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么” 谁依赖于谁：当然是应用程序依赖于IoC容器； &emsp;为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源； &emsp;谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象； &emsp;注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。 &emsp;&emsp;2004年，大师级人物 Martin Fowler 给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。 &emsp;&emsp;当初学习 Spring 的时候看过很多对 Spring 的 IOC 的理解的文章，官方文档也看过。实际上开发过程中自己是实操过，但是对这个控制反转还是一头雾水，在慕课上看了一篇学习笔记，对作者的这种解释比较满意，清楚的解释了什么是控制，什么是反转，谁依赖谁，谁注入谁。 面向切面编程AOP什么是AOP呢？我们常说：“这件事情要从几个方面来看待”，往往意思是：需要从不同的角度来看待同一个事物。这里的“方面”，指的是事物的外在特性在不同观察角度下的体现。而在AOP中，Aspect的含义，可能更多的理解为“切面”比较合适。这在程序开发上就是：通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。 主要功能：&emsp;&emsp;日志记录，性能统计，安全控制，事务处理，异常处理等等。 什么时候用到AOP呢？拿我前面做过的一个项目举个例子吧，做的是一个公司的订餐系统，这个系统需要用到Shiro鉴权。项目里面很多的接口，但是有的接口不需要鉴权就可以访问了，是开放的。但是还有一些接口，需要特定权限的用户才能访问，比如说公司的领导的权限跟员工的权限不一样，还有系统管理员。 如果要用 OOP 处理的话，必须在对应的接口代码里面，一个一个写上鉴权的代码。 但是如果使用了AOP之后，写一个接口，在需要鉴权的接口上面添加一个注解即可解决了。这样的做法，对原有代码毫无入侵性，这就是AOP的好处了，把和主业务无关的事情，放到代码外面去做。 上面的例子。给 listCanteenOrders() 方法加入鉴权采用了代理模式。代理模式就是：写了新的接口，去代理一个一个鉴权的代码鉴权。 代理分为静态代理和动态代理，静态代理，顾名思义，就是你自己写代理对象，动态代理，则是在运行期，生成一个代理对象。 Spring AOP就是基于动态代理的，如果要代理的对象，实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象。 AOP常用的还有在日志打印跟事务处理方面应用的比较多。 AOP的优点 AOP 是一个概念，一个规范，本身并没有设定具体语言的实现，这实际上提供了非常广阔的发展的空间。 AOP 同时还可以让我们层次化功能性而不是嵌入功能性，从而使得代码有更好的可读性和易于维护。 AOP 让我们在进行系统架构和模块设计的时候多了新的选择和新的思路。 结语面向过程编程已经成为了过去式，面向对象编程正在一统软件开发世界。而 Spring 是独特的、优秀的。今天有时间梳理一遍关于 Spring 的有关知识还是收获颇多，许多知识也是以往的自己所不知道的。关于 Spring 的学习还远远没有结束。学习的最好的方法就是尝试，积累足够的项目经验，才能在需要用到时候信手拈来，继续努力吧！]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>JAVA后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github+hexo 搭建属于自己的一个博客]]></title>
    <url>%2F2019%2F01%2F28%2Fgithub-hexo-da-jian-shu-yu-zi-ji-de-yi-ge-bo-ke%2F</url>
    <content type="text"><![CDATA[技术小白搭建个人博客&emsp;—— hexo+github 前言为什么要搭建一个自己的博客呢？ 因为是个技术小白，然后经常在网上浏览各种技术博客，总面临一个问题。那就是每次看过之后就忘了，回过头来感觉还是没学到什么，就像做无用功一样。俗话说好记性不如烂笔头，于是决定了。作为一个程序猿，当然也得有一个记录自己学习工作的一个博客咯！于是谷歌一下，看了一会儿，于是决定采用 Github+hexo 搭建一个属于自己的博客。 这里说一下为什么选择 Github+hexo 搭建的几点原因： 1 当然是因为穷啦，Github免费的 2 快速搭建，全程走下来只要差不多一个小时就可以搭建成功了 3 全静态，支持MarkDown,静态博客最大的优势就是没有数据库，可以很方便的迁移，也不用担心安全问题 开始搭建1 软件安装配置搭建博客，首先需要安装环境，这里需要两个软件：Git和Nodejs。 Git安装 网址：https://git-scm.com/download/win Node.js安装 网址：https://nodejs.org/en/download/ 安装完成之后，要确认自己是否安装成功，打开cmd运行下面的命令，有返回信息就是成功的了。 git –versionnode -vnpm -v 2 安装hexo我个人习惯把相关的软件安装在一起，所以新建一个文件夹用来安装hexo,新建一个文件夹 hexo博客 然后打开这个文件夹，刚刚安装成功了git,在空白地方点击右键，选择 Git bash here 利用npm命令安装hexo npm install hexo-cli -g 安装完成之后，关掉Git Bash 窗口，然后在hexo博客 文件夹下面新建一个文件夹，这个文件夹就是放hexo跟你以后写的博客的文件夹，名字随便你自己取，我的叫username.github.io 进入刚刚你新建的这个文件夹，同样里面什么都没有，然后右键空白地方，选择 Git bash here ，执行安装hexo的命令。 hexo init 安装依赖包 npm install git部署安装 npm install hexo-deployer-git –save 到了这里，该安装的已经安装好了，接下来就看看成果吧。 hexo ghexo s 到浏览器输入 localhost:4000就可以看到页面内容了。这个时候看到的是一篇默认的博客：Hello World。 3 把博客部署到Github Pages上去 完成了上面的工作，我们已经可以写自己的博客了，但是呢，博客只能在自己的本地看得到，别人无法在网上查看你的博客。接下来我们就要结合Github page的功能让别人也能看到你的博客。 如果你没有github的话，首先需要注册一个github，访问github，点击右上角的注册。uername 最好都用小写，因为最后建立的博客地址是：http://username.github.io 邮箱十分重要，GitHub 上很多通知都是发送到你的邮箱的。 创建Repository代码仓库Repository 名字应该是username.github.io。username 就是 你注册时候的 username。点击creat repository 仓库建好了，接下来就需要把本地的代码放到这个仓库里面。 首先检查自己的电脑上面有没有SSH Key,打开cmd输入下面命令: cd ~/. ssh 如果返回“No such file or directory”，说明你的电脑上面没有SSH Key。 生成新的SSH Key 第一步、创建一对新的SSH密钥(keys) ssh-keygen -t rsa -C “邮件地址@youremail.com” 输入回车之后系统会要你输入密码： Enter passphrase (empty for no passphrase):&lt;设置密码&gt;Enter same passphrase again:&lt;再次输入密码&gt; 【提示】输入密码的时候，密码是看不见的，不要慌！ 输入完成后会出现： Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 第二步、在GitHub中添加你的公钥 运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。 clip &lt; ~/.ssh/id_rsa.pub 接下来： 1.登陆GitHub,进入你的Account Settings。 2.选择SSH Keys 3.粘贴密钥，添加即可 添加好之后我们还需要测试一下添加的东西有没有效果。 进入hexo博客这个文件夹，右键空白，然后选择Git bash here，输入下面的命令： ssh -T git@github.com 返回： The authenticity of host ‘GitHub.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no) 输入 yes 之后证明添加的东西已经起了效果，接下来我们还需要设置一点东西： $ git config –global user.name “wuyalan”//输入注册时的username$ git config –global user.email “alan.wyl@foxmail.com“//填写注册邮箱 git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。 第三步、将本地的Hexo文件更新到Github的库中 上面我们已经把本机跟github的连接通道打通了，现在就是把本地的东西放到我们建的仓库里面去。 1.登录Github打开自己的项目 username.github.io 2.第二步、打开之后，点击SSH，选择SSH类型地址 3.第三步、复制地址 4.第四步、打开一开始创建的hexo博客文件夹，用记事本打开刚文件夹下的_config.yml文件 5.第五步、在配置文件里作如下修改，保存 deploy:&emsp;&emsp;type: git&emsp;&emsp;repository: git@github.com:username/username.github.io.git&emsp;&emsp;branch: master 6.第六步、在Hexo文件夹下Git bash here界面执行： hexo ghexo d 执行完之后会让你输入github的密码，输入完后就可以把自己的代码上传到GitHub上面了。如果报错： ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次： npm install hexo-deployer-git –save 一切正常之后就可以打开浏览器，输入 username.github.io查看了，这个username就是前面建好的那个。如果得到你想要的效果，那么恭喜你，博客已经搭建好啦！每一个人都可以通过这个地址访问到你的博客了。 接下来你就可以随心所欲的写各种属于自己的博客啦，是不是很酷啊。全程走下来大概花费时间在一个小时左右。当然了，搭建不费什么事情，就是有很多坑注意避免一下就行了，具体原因可以谷歌解决哈~！ 结语搭建了属于自己的博客，还是有一定的成就感的。也把自己搭建的过程写出来了，当然第一次写博客还有很多地方不足，虽然内容不是很多，但是写的时间也很长。其实博客远不止于此，会搭建之后你还得会写，使用 MarkDown 进行编写，我推荐使用Markdown Pad2，我也是使用的这款软件。博客的样子还很丑，以后有时间再来慢慢美化。以后的路还很长，所以要认真写博客，记录自己的成长。 如果有什么问题的话，可以通过我博客的联系方式联系我，也欢迎大家一起交流，一起学习进步。 以下一些工具及学习连接： Markdown Pad2：https://pan.baidu.com/s/1JR_0OCoaM98IlAK67KocUw &emsp;提取码：xqao Markdown——入门指南 使用next主题配置博客基本信息 hexo的next主题个性化配置教程 让你的Hexo博客华丽升级]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
